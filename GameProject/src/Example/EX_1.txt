//Робота з вектором
//
	std::vector<Enemy> proba = { 1,2,3,4,5 };
	for (auto itr = proba.begin(); itr != proba.end(); ++itr)
	{
		if (true)
			proba.erase(itr);
	}
///////////////////////////////////////////////////////////////////////
//
//Квадрат, коло, трикутник
//Відмалювання
//


	//FIgures
	/*
	// Rectangle
	void MoveRec(Rectang& _rec);
	bool CheckSizeR(Rectang& _rec, int _x, int _y, int _w, int _h);
	void GetLastR(Rectang& _rec);

	// Triangle_Equilateral
	void MoveTr_e(Triang& _tr);
	bool CheckSizeT(Triang& _tr, int _x, int _y, int _w, int _h);
	void GetLastT(Triang& _tr);

	*/

// First Attempt
#ifdef DEBUG
/*
if (_a == true) {
		FillInColor(Color(1, 1, 1));
		for (int i = 0; i < el.Get_R() * 2; i++)
		{
			for (int j = 0; j < el.Get_R() * 2; j++)
			{
				if (sqrt(pow(el.Get_R() - i, 2) + pow(el.Get_R() - j, 2)) <= el.Get_R()
					|| j == el.Get_R() || i == el.Get_R())
				{
					this->_mColorBuffer[el._y + i][el._x + j].R = el.r;
					this->_mColorBuffer[el._y + i][el._x + j].R = el.g;
					this->_mColorBuffer[el._y + i][el._x + j].R = el.b;
				}
			}

		}
	}
*/
//My CoDE
///Rectangle
void Window::MoveRec(Rectang& _rec) {
	FillInColor(Color(0.1, 0.8, 0.6));
	if (CheckSizeR(_rec, _rec._x, _rec._y, 1024, 500))
	{
		GetLastR(_rec);
	}
	else {

		for (int i = 0; i < _rec.height; i++)
		{
			for (int j = 0; j < _rec.weight; j++)
			{
				this->_mColorBuffer[_rec._y + i][_rec._x + j].R = _rec.R;
				this->_mColorBuffer[_rec._y + i][_rec._x + j].G = _rec.G;
				this->_mColorBuffer[_rec._y + i][_rec._x + j].B = _rec.B;
			}
		}
		_rec._x++;
		_rec._y++;
	}
}
bool Window::CheckSizeR(Rectang& _rec, int _x, int _y, int _w, int _h) {
	if (_y + _rec.height == (_h - 1) || _x + _rec.weight == (_w - 1))
	{
		return true;
	}
	else { return false; }
}
void Window::GetLastR(Rectang& _rec) {
	for (int i = 0; i < _rec.height; i++)
	{
		for (int j = 0; j < _rec.weight; j++)
		{
			this->_mColorBuffer[_rec._y + i][_rec._x + j].R = _rec.R;
			this->_mColorBuffer[_rec._y + i][_rec._x + j].G = _rec.G;
			this->_mColorBuffer[_rec._y + i][_rec._x + j].B = _rec.B;
		}
	}
};
///Triangle
////Equilateral
void Window::MoveTr_e(Triang& _tr) {
	_tr.Set_height(_tr.Get_iA());
	FillInColor(Color(0.1, 0.8, 0.6));
	if (CheckSizeT(_tr, _tr.Get_x(), _tr.Get_y(), 1024, 500))
	{
		GetLastT(_tr);
	}
	else {
		//Left_Side
		float _temp1 = _tr.Get_iA() / 2;
		for (int i = 0; i < _tr.Get_height(); i++)
		{
			if (_temp1 == 0)
			{
				break;
			}
			for (int j = _tr.Get_iA() / 2; j > _temp1; j--)
			{
				this->_mColorBuffer[_tr.Get_y() + i][_tr.Get_x() + j].R = _tr.Get_R();
				this->_mColorBuffer[_tr.Get_y() + i][_tr.Get_x() + j].G = _tr.Get_G();
				this->_mColorBuffer[_tr.Get_y() + i][_tr.Get_x() + j].B = _tr.Get_B();
			}
			_temp1--;
		}
#	//Right_Side
		float _temp = _tr.Get_iA() / 2;
		for (int i = 0; i < _tr.Get_height(); i++)
		{
			if (_temp == _tr.Get_iA())
			{
				break;
			}
			for (int j = _tr.Get_iA() / 2; j < _temp; j++)
			{
				this->_mColorBuffer[_tr.Get_y() + i][_tr.Get_x() + j].R = _tr.Get_R();
				this->_mColorBuffer[_tr.Get_y() + i][_tr.Get_x() + j].G = _tr.Get_G();
				this->_mColorBuffer[_tr.Get_y() + i][_tr.Get_x() + j].B = _tr.Get_B();
			}
			_temp++;
		}
		_tr.Plus_X();
		_tr.Plus_Y();

	}
};
bool Window::CheckSizeT(Triang& _tr, int _x, int _y, int _w, int _h) {
	if (_y + _tr.Get_iA() == (_h - 1) || _x + _tr.Get_height() == (_w - 1))
	{
		return true;
	}
	else {
		return false;
	}


}
void Window::GetLastT(Triang& _tr) {
	//Left_Side
	float _temp1 = _tr.Get_iA() / 2;
	for (int i = 0; i < _tr.Get_height(); i++)
	{
		if (_temp1 == 0)
		{
			break;
		}
		for (int j = _tr.Get_iA() / 2; j > _temp1; j--)
		{
			this->_mColorBuffer[_tr.Get_y() + i][_tr.Get_x() + j].R = _tr.Get_R();
			this->_mColorBuffer[_tr.Get_y() + i][_tr.Get_x() + j].G = _tr.Get_G();
			this->_mColorBuffer[_tr.Get_y() + i][_tr.Get_x() + j].B = _tr.Get_B();
		}
		_temp1--;
	}
#	//Right_Side
	float _temp = _tr.Get_iA() / 2;
	for (int i = 0; i < _tr.Get_height(); i++)
	{
		if (_temp == _tr.Get_iA())
		{
			break;
		}
		for (int j = _tr.Get_iA() / 2; j < _temp; j++)
		{
			this->_mColorBuffer[_tr.Get_y() + i][_tr.Get_x() + j].R = _tr.Get_R();
			this->_mColorBuffer[_tr.Get_y() + i][_tr.Get_x() + j].G = _tr.Get_G();
			this->_mColorBuffer[_tr.Get_y() + i][_tr.Get_x() + j].B = _tr.Get_B();
		}
		_temp++;
	}
};

#endif // DEBUG
